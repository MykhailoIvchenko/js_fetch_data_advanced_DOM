{"version":3,"sources":["scripts/main.js"],"names":["phonesUrl","phonesDetailsUrl","getPhones","url","fetch","then","response","ok","setTimeout","json","getFirstReceivedDetails","phonesID","promisesArray","id","push","firstReceived","Promise","race","phoneDetails","makeDom","name","catch","error","getAllSuccessfulDetails","phoneDetailsArray","allSettled","responses","successfullResponses","filter","status","value","getThreeFastestDetails","fastestResponse","threeFastestArray","phonesIdCopy","i","element","j","length","splice","clone","elementId","elementName","header","nameOfClass","body","document","querySelector","insertAdjacentHTML","elemContainer","createElement","currentHeader","currentList","innerHTML","classList","add","append","appendChild","phones","map"],"mappings":"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","file":"main.0da9ab2b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst phonesUrl\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst phonesDetailsUrl\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\n\n// this function is necessary only for phones ids receiving\n\nfunction getPhones(url) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        setTimeout(() => {\n          // throw `${response.status} - ${response.statusText}`;\n        }, 5000);\n      }\n\n      return response.json();\n    });\n}\n\nfunction getFirstReceivedDetails(phonesID) {\n  const promisesArray = [];\n\n  for (const id of phonesID) {\n    promisesArray.push(fetch(`${phonesDetailsUrl}${id}.json`));\n  }\n\n  const firstReceived = Promise.race(promisesArray);\n\n  firstReceived.then(response => response.json())\n    .then(phoneDetails => {\n      makeDom(phoneDetails.id, phoneDetails.name,\n        'First received', 'first-received');\n    })\n    .catch(error => {\n      makeDom('Error:', error);\n    });\n\n  return firstReceived;\n}\n\nfunction getAllSuccessfulDetails(phonesID) {\n  const phoneDetailsArray = [];\n  const promisesArray = [];\n\n  for (const id of phonesID) {\n    promisesArray.push(fetch(`${phonesDetailsUrl}${id}.json`));\n  }\n\n  Promise.allSettled(promisesArray).then((responses) => {\n    const successfullResponses\n    = responses.filter((response) => response.status === 'fulfilled');\n\n    for (const result of successfullResponses) {\n      result.value.json().then(phoneDetails => {\n        phoneDetailsArray.push(phoneDetails);\n\n        makeDom(phoneDetails.id, phoneDetails.name,\n          'All Successful', 'all-successful');\n      });\n    }\n  });\n\n  return phoneDetailsArray;\n}\n\nfunction getThreeFastestDetails(phonesID) {\n  const promisesArray = [];\n  const threeFastestArray = [];\n  const phonesIdCopy = [...phonesID];\n\n  for (const id of phonesID) {\n    promisesArray.push(fetch(`${phonesDetailsUrl}${id}.json`));\n  }\n\n  let fastestResponse;\n\n  for (let i = 0; i < 3; i++) {\n    fastestResponse = Promise.race(promisesArray);\n\n    threeFastestArray.push(fastestResponse);\n\n    fastestResponse.then(element => {\n      for (let j = 0; j < phonesIdCopy.length; j++) {\n        if (`${phonesDetailsUrl}${phonesIdCopy[j]}.json`\n        === element.url) {\n          promisesArray.splice(j, 1);\n          phonesIdCopy.splice(j, 1);\n          break;\n        }\n      }\n    });\n  }\n\n  for (const phone of threeFastestArray) {\n    phone.then(response => response.clone().json())\n      .then(phoneDetails => {\n        makeDom(phoneDetails.id, phoneDetails.name,\n          'First three received', 'first-three-received');\n      })\n      .catch(error => {\n        makeDom('rejected', 'rejected', 'Error', error);\n      });\n  }\n\n  return threeFastestArray;\n}\n\nfunction makeDom(elementId, elementName, header, nameOfClass) {\n  const body = document.querySelector('body');\n\n  if (!document.querySelector(`.${nameOfClass}`)) {\n    const elemContainer = document.createElement('div');\n    const currentHeader = document.createElement('h2');\n    const currentList = document.createElement('ul');\n\n    currentHeader.innerHTML = header;\n\n    elemContainer.classList.add(nameOfClass);\n\n    body.append(elemContainer);\n    elemContainer.appendChild(currentHeader);\n    elemContainer.appendChild(currentList);\n\n    currentList.insertAdjacentHTML('beforeend',\n      `<li>ID: ${elementId}<br>\n      Name: ${elementName}</li>`);\n  } else {\n    const currentContainer = document.querySelector(`.${nameOfClass}`);\n    const phonesList = currentContainer.querySelector('ul');\n\n    phonesList.insertAdjacentHTML('beforeend',\n      `<li>ID: ${elementId}<br>\n      Name: ${elementName}</li>`);\n  }\n}\n\ngetPhones(phonesUrl).then(phones => {\n  getFirstReceivedDetails(phones.map(element => element.id));\n});\n\ngetPhones(phonesUrl).then(phones => {\n  getAllSuccessfulDetails(phones.map(element => element.id));\n});\n\ngetPhones(phonesUrl).then(phones => {\n  getThreeFastestDetails(phones.map(element => element.id));\n});\n"]}